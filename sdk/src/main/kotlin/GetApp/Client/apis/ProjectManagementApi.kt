/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package GetApp.Client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import GetApp.Client.models.DeviceResDto
import GetApp.Client.models.EditProjectMemberDto
import GetApp.Client.models.MemberProjectResDto
import GetApp.Client.models.MemberProjectsResDto
import GetApp.Client.models.MemberResDto
import GetApp.Client.models.ProjectConfigDto
import GetApp.Client.models.ProjectConfigResDto
import GetApp.Client.models.ProjectDto
import GetApp.Client.models.ProjectMemberDto
import GetApp.Client.models.ProjectReleasesDto
import GetApp.Client.models.ProjectResDto
import GetApp.Client.models.ProjectTokenDto

import com.squareup.moshi.Json

import GetApp.Client.infrastructure.ApiClient
import GetApp.Client.infrastructure.ApiResponse
import GetApp.Client.infrastructure.ClientException
import GetApp.Client.infrastructure.ClientError
import GetApp.Client.infrastructure.ServerException
import GetApp.Client.infrastructure.ServerError
import GetApp.Client.infrastructure.MultiValueMap
import GetApp.Client.infrastructure.PartConfig
import GetApp.Client.infrastructure.RequestConfig
import GetApp.Client.infrastructure.RequestMethod
import GetApp.Client.infrastructure.ResponseType
import GetApp.Client.infrastructure.Success
import GetApp.Client.infrastructure.toMultiValue

class ProjectManagementApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Add member to Project
     * 
     * @param projectId 
     * @param projectMemberDto 
     * @return MemberProjectResDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerAddMemberToProject(projectId: kotlin.Any, projectMemberDto: ProjectMemberDto) : MemberProjectResDto {
        val localVarResponse = projectManagementControllerAddMemberToProjectWithHttpInfo(projectId = projectId, projectMemberDto = projectMemberDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MemberProjectResDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add member to Project
     * 
     * @param projectId 
     * @param projectMemberDto 
     * @return ApiResponse<MemberProjectResDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerAddMemberToProjectWithHttpInfo(projectId: kotlin.Any, projectMemberDto: ProjectMemberDto) : ApiResponse<MemberProjectResDto?> {
        val localVariableConfig = projectManagementControllerAddMemberToProjectRequestConfig(projectId = projectId, projectMemberDto = projectMemberDto)

        return request<ProjectMemberDto, MemberProjectResDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerAddMemberToProject
     *
     * @param projectId 
     * @param projectMemberDto 
     * @return RequestConfig
     */
    fun projectManagementControllerAddMemberToProjectRequestConfig(projectId: kotlin.Any, projectMemberDto: ProjectMemberDto) : RequestConfig<ProjectMemberDto> {
        val localVariableBody = projectMemberDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/projectManagement/project/{projectId}/member".replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerCheckHealth() : Unit {
        val localVarResponse = projectManagementControllerCheckHealthWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerCheckHealthWithHttpInfo() : ApiResponse<Unit?> {
        val localVariableConfig = projectManagementControllerCheckHealthRequestConfig()

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerCheckHealth
     *
     * @return RequestConfig
     */
    fun projectManagementControllerCheckHealthRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/projectManagement/checkHealth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Project
     * 
     * @param projectDto 
     * @return ProjectResDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerCreateProject(projectDto: ProjectDto) : ProjectResDto {
        val localVarResponse = projectManagementControllerCreateProjectWithHttpInfo(projectDto = projectDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Project
     * 
     * @param projectDto 
     * @return ApiResponse<ProjectResDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerCreateProjectWithHttpInfo(projectDto: ProjectDto) : ApiResponse<ProjectResDto?> {
        val localVariableConfig = projectManagementControllerCreateProjectRequestConfig(projectDto = projectDto)

        return request<ProjectDto, ProjectResDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerCreateProject
     *
     * @param projectDto 
     * @return RequestConfig
     */
    fun projectManagementControllerCreateProjectRequestConfig(projectDto: ProjectDto) : RequestConfig<ProjectDto> {
        val localVariableBody = projectDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/projectManagement/project",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create Upload token for a Project
     * 
     * @param projectId 
     * @return ProjectTokenDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerCreateToken(projectId: kotlin.Any) : ProjectTokenDto {
        val localVarResponse = projectManagementControllerCreateTokenWithHttpInfo(projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectTokenDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Upload token for a Project
     * 
     * @param projectId 
     * @return ApiResponse<ProjectTokenDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerCreateTokenWithHttpInfo(projectId: kotlin.Any) : ApiResponse<ProjectTokenDto?> {
        val localVariableConfig = projectManagementControllerCreateTokenRequestConfig(projectId = projectId)

        return request<Unit, ProjectTokenDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerCreateToken
     *
     * @param projectId 
     * @return RequestConfig
     */
    fun projectManagementControllerCreateTokenRequestConfig(projectId: kotlin.Any) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/projectManagement/project/{projectId}/createToken".replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit member details
     * 
     * @param memberId 
     * @param projectId 
     * @param editProjectMemberDto 
     * @return MemberResDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerEditMember(memberId: kotlin.Any, projectId: kotlin.Any, editProjectMemberDto: EditProjectMemberDto) : MemberResDto {
        val localVarResponse = projectManagementControllerEditMemberWithHttpInfo(memberId = memberId, projectId = projectId, editProjectMemberDto = editProjectMemberDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MemberResDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit member details
     * 
     * @param memberId 
     * @param projectId 
     * @param editProjectMemberDto 
     * @return ApiResponse<MemberResDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerEditMemberWithHttpInfo(memberId: kotlin.Any, projectId: kotlin.Any, editProjectMemberDto: EditProjectMemberDto) : ApiResponse<MemberResDto?> {
        val localVariableConfig = projectManagementControllerEditMemberRequestConfig(memberId = memberId, projectId = projectId, editProjectMemberDto = editProjectMemberDto)

        return request<EditProjectMemberDto, MemberResDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerEditMember
     *
     * @param memberId 
     * @param projectId 
     * @param editProjectMemberDto 
     * @return RequestConfig
     */
    fun projectManagementControllerEditMemberRequestConfig(memberId: kotlin.Any, projectId: kotlin.Any, editProjectMemberDto: EditProjectMemberDto) : RequestConfig<EditProjectMemberDto> {
        val localVariableBody = editProjectMemberDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/projectManagement/project/{projectId}/member/{memberId}".replace("{"+"memberId"+"}", encodeURIComponent(memberId.toString())).replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all devices in platform
     * 
     * @param platform 
     * @return kotlin.collections.List<DeviceResDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerGetDeviceByPlatform(platform: kotlin.String) : kotlin.collections.List<DeviceResDto> {
        val localVarResponse = projectManagementControllerGetDeviceByPlatformWithHttpInfo(platform = platform)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DeviceResDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all devices in platform
     * 
     * @param platform 
     * @return ApiResponse<kotlin.collections.List<DeviceResDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerGetDeviceByPlatformWithHttpInfo(platform: kotlin.String) : ApiResponse<kotlin.collections.List<DeviceResDto>?> {
        val localVariableConfig = projectManagementControllerGetDeviceByPlatformRequestConfig(platform = platform)

        return request<Unit, kotlin.collections.List<DeviceResDto>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerGetDeviceByPlatform
     *
     * @param platform 
     * @return RequestConfig
     */
    fun projectManagementControllerGetDeviceByPlatformRequestConfig(platform: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/projectManagement/devices/platform/{platform}".replace("{"+"platform"+"}", encodeURIComponent(platform.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all devices with catalogId
     * 
     * @param catalogId 
     * @return kotlin.collections.List<DeviceResDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerGetDevicesByCatalogId(catalogId: kotlin.String) : kotlin.collections.List<DeviceResDto> {
        val localVarResponse = projectManagementControllerGetDevicesByCatalogIdWithHttpInfo(catalogId = catalogId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DeviceResDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all devices with catalogId
     * 
     * @param catalogId 
     * @return ApiResponse<kotlin.collections.List<DeviceResDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerGetDevicesByCatalogIdWithHttpInfo(catalogId: kotlin.String) : ApiResponse<kotlin.collections.List<DeviceResDto>?> {
        val localVariableConfig = projectManagementControllerGetDevicesByCatalogIdRequestConfig(catalogId = catalogId)

        return request<Unit, kotlin.collections.List<DeviceResDto>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerGetDevicesByCatalogId
     *
     * @param catalogId 
     * @return RequestConfig
     */
    fun projectManagementControllerGetDevicesByCatalogIdRequestConfig(catalogId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/projectManagement/devices/catalogId/{catalogId}".replace("{"+"catalogId"+"}", encodeURIComponent(catalogId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all devices using component of the projectId
     * 
     * @param projectId 
     * @return kotlin.collections.List<DeviceResDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerGetDevicesByProject(projectId: java.math.BigDecimal) : kotlin.collections.List<DeviceResDto> {
        val localVarResponse = projectManagementControllerGetDevicesByProjectWithHttpInfo(projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DeviceResDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all devices using component of the projectId
     * 
     * @param projectId 
     * @return ApiResponse<kotlin.collections.List<DeviceResDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerGetDevicesByProjectWithHttpInfo(projectId: java.math.BigDecimal) : ApiResponse<kotlin.collections.List<DeviceResDto>?> {
        val localVariableConfig = projectManagementControllerGetDevicesByProjectRequestConfig(projectId = projectId)

        return request<Unit, kotlin.collections.List<DeviceResDto>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerGetDevicesByProject
     *
     * @param projectId 
     * @return RequestConfig
     */
    fun projectManagementControllerGetDevicesByProjectRequestConfig(projectId: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/projectManagement/devices/project/{projectId}".replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get project&#39;s config option
     * 
     * @return ProjectConfigResDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerGetProjectConfigOption() : ProjectConfigResDto {
        val localVarResponse = projectManagementControllerGetProjectConfigOptionWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectConfigResDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get project&#39;s config option
     * 
     * @return ApiResponse<ProjectConfigResDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerGetProjectConfigOptionWithHttpInfo() : ApiResponse<ProjectConfigResDto?> {
        val localVariableConfig = projectManagementControllerGetProjectConfigOptionRequestConfig()

        return request<Unit, ProjectConfigResDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerGetProjectConfigOption
     *
     * @return RequestConfig
     */
    fun projectManagementControllerGetProjectConfigOptionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/projectManagement/projectConfigOption",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get project release
     * 
     * @param projectId 
     * @return kotlin.collections.List<ProjectReleasesDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerGetProjectReleases(projectId: kotlin.Any) : kotlin.collections.List<ProjectReleasesDto> {
        val localVarResponse = projectManagementControllerGetProjectReleasesWithHttpInfo(projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ProjectReleasesDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get project release
     * 
     * @param projectId 
     * @return ApiResponse<kotlin.collections.List<ProjectReleasesDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerGetProjectReleasesWithHttpInfo(projectId: kotlin.Any) : ApiResponse<kotlin.collections.List<ProjectReleasesDto>?> {
        val localVariableConfig = projectManagementControllerGetProjectReleasesRequestConfig(projectId = projectId)

        return request<Unit, kotlin.collections.List<ProjectReleasesDto>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerGetProjectReleases
     *
     * @param projectId 
     * @return RequestConfig
     */
    fun projectManagementControllerGetProjectReleasesRequestConfig(projectId: kotlin.Any) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/projectManagement/project/{projectId}/projectReleases".replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all User&#39;s projects
     * 
     * @return MemberProjectsResDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerGetUserProjects() : MemberProjectsResDto {
        val localVarResponse = projectManagementControllerGetUserProjectsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MemberProjectsResDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all User&#39;s projects
     * 
     * @return ApiResponse<MemberProjectsResDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerGetUserProjectsWithHttpInfo() : ApiResponse<MemberProjectsResDto?> {
        val localVariableConfig = projectManagementControllerGetUserProjectsRequestConfig()

        return request<Unit, MemberProjectsResDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerGetUserProjects
     *
     * @return RequestConfig
     */
    fun projectManagementControllerGetUserProjectsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/projectManagement/project",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove member from Project
     * 
     * @param memberId 
     * @param projectId 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerRemoveMemberFromProject(memberId: kotlin.Any, projectId: kotlin.Any) : Unit {
        val localVarResponse = projectManagementControllerRemoveMemberFromProjectWithHttpInfo(memberId = memberId, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove member from Project
     * 
     * @param memberId 
     * @param projectId 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerRemoveMemberFromProjectWithHttpInfo(memberId: kotlin.Any, projectId: kotlin.Any) : ApiResponse<Unit?> {
        val localVariableConfig = projectManagementControllerRemoveMemberFromProjectRequestConfig(memberId = memberId, projectId = projectId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerRemoveMemberFromProject
     *
     * @param memberId 
     * @param projectId 
     * @return RequestConfig
     */
    fun projectManagementControllerRemoveMemberFromProjectRequestConfig(memberId: kotlin.Any, projectId: kotlin.Any) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/projectManagement/project/{projectId}/member/{memberId}".replace("{"+"memberId"+"}", encodeURIComponent(memberId.toString())).replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Set project&#39;s config option
     * 
     * @param projectConfigDto 
     * @return ProjectConfigDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun projectManagementControllerSetProjectConfigOption(projectConfigDto: ProjectConfigDto) : ProjectConfigDto {
        val localVarResponse = projectManagementControllerSetProjectConfigOptionWithHttpInfo(projectConfigDto = projectConfigDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectConfigDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set project&#39;s config option
     * 
     * @param projectConfigDto 
     * @return ApiResponse<ProjectConfigDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun projectManagementControllerSetProjectConfigOptionWithHttpInfo(projectConfigDto: ProjectConfigDto) : ApiResponse<ProjectConfigDto?> {
        val localVariableConfig = projectManagementControllerSetProjectConfigOptionRequestConfig(projectConfigDto = projectConfigDto)

        return request<ProjectConfigDto, ProjectConfigDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation projectManagementControllerSetProjectConfigOption
     *
     * @param projectConfigDto 
     * @return RequestConfig
     */
    fun projectManagementControllerSetProjectConfigOptionRequestConfig(projectConfigDto: ProjectConfigDto) : RequestConfig<ProjectConfigDto> {
        val localVariableBody = projectConfigDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/projectManagement/projectConfigOption",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
