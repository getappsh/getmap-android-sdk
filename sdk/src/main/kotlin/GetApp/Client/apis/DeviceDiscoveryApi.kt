/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package GetApp.Client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import GetApp.Client.models.DeviceComponentsOfferingDto
import GetApp.Client.models.DeviceDiscoverResDto
import GetApp.Client.models.DiscoveryMessageDto
import GetApp.Client.models.DiscoveryResDto
import GetApp.Client.models.MTlsStatusDto
import GetApp.Client.models.OfferingMapResDto

import com.squareup.moshi.Json

import GetApp.Client.infrastructure.ApiClient
import GetApp.Client.infrastructure.ApiResponse
import GetApp.Client.infrastructure.ClientException
import GetApp.Client.infrastructure.ClientError
import GetApp.Client.infrastructure.ServerException
import GetApp.Client.infrastructure.ServerError
import GetApp.Client.infrastructure.MultiValueMap
import GetApp.Client.infrastructure.PartConfig
import GetApp.Client.infrastructure.RequestConfig
import GetApp.Client.infrastructure.RequestMethod
import GetApp.Client.infrastructure.ResponseType
import GetApp.Client.infrastructure.Success
import GetApp.Client.infrastructure.toMultiValue

class DeviceDiscoveryApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Discover Device Component
     * This service message allows a device to post the discovery context for getting device software offers.
     * @param discoveryMessageDto 
     * @return DeviceComponentsOfferingDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoveryControllerDeviceComponentDiscovery(discoveryMessageDto: DiscoveryMessageDto) : DeviceComponentsOfferingDto {
        val localVarResponse = discoveryControllerDeviceComponentDiscoveryWithHttpInfo(discoveryMessageDto = discoveryMessageDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeviceComponentsOfferingDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Discover Device Component
     * This service message allows a device to post the discovery context for getting device software offers.
     * @param discoveryMessageDto 
     * @return ApiResponse<DeviceComponentsOfferingDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discoveryControllerDeviceComponentDiscoveryWithHttpInfo(discoveryMessageDto: DiscoveryMessageDto) : ApiResponse<DeviceComponentsOfferingDto?> {
        val localVariableConfig = discoveryControllerDeviceComponentDiscoveryRequestConfig(discoveryMessageDto = discoveryMessageDto)

        return request<DiscoveryMessageDto, DeviceComponentsOfferingDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoveryControllerDeviceComponentDiscovery
     *
     * @param discoveryMessageDto 
     * @return RequestConfig
     */
    fun discoveryControllerDeviceComponentDiscoveryRequestConfig(discoveryMessageDto: DiscoveryMessageDto) : RequestConfig<DiscoveryMessageDto> {
        val localVariableBody = discoveryMessageDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/device/discover/component",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Discover Device Context
     * This service message allows a device to post the discovery context.
     * @param discoveryMessageDto 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoveryControllerDeviceContext(discoveryMessageDto: DiscoveryMessageDto) : Unit {
        val localVarResponse = discoveryControllerDeviceContextWithHttpInfo(discoveryMessageDto = discoveryMessageDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Discover Device Context
     * This service message allows a device to post the discovery context.
     * @param discoveryMessageDto 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun discoveryControllerDeviceContextWithHttpInfo(discoveryMessageDto: DiscoveryMessageDto) : ApiResponse<Unit?> {
        val localVariableConfig = discoveryControllerDeviceContextRequestConfig(discoveryMessageDto = discoveryMessageDto)

        return request<DiscoveryMessageDto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoveryControllerDeviceContext
     *
     * @param discoveryMessageDto 
     * @return RequestConfig
     */
    fun discoveryControllerDeviceContextRequestConfig(discoveryMessageDto: DiscoveryMessageDto) : RequestConfig<DiscoveryMessageDto> {
        val localVariableBody = discoveryMessageDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/device/discover/deviceContext",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Discover Device map
     * This service message allows a device to post the discovery context for getting device maps offers.
     * @param discoveryMessageDto 
     * @return OfferingMapResDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoveryControllerDeviceMapDiscovery(discoveryMessageDto: DiscoveryMessageDto) : OfferingMapResDto {
        val localVarResponse = discoveryControllerDeviceMapDiscoveryWithHttpInfo(discoveryMessageDto = discoveryMessageDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OfferingMapResDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Discover Device map
     * This service message allows a device to post the discovery context for getting device maps offers.
     * @param discoveryMessageDto 
     * @return ApiResponse<OfferingMapResDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discoveryControllerDeviceMapDiscoveryWithHttpInfo(discoveryMessageDto: DiscoveryMessageDto) : ApiResponse<OfferingMapResDto?> {
        val localVariableConfig = discoveryControllerDeviceMapDiscoveryRequestConfig(discoveryMessageDto = discoveryMessageDto)

        return request<DiscoveryMessageDto, OfferingMapResDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoveryControllerDeviceMapDiscovery
     *
     * @param discoveryMessageDto 
     * @return RequestConfig
     */
    fun discoveryControllerDeviceMapDiscoveryRequestConfig(discoveryMessageDto: DiscoveryMessageDto) : RequestConfig<DiscoveryMessageDto> {
        val localVariableBody = discoveryMessageDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/device/discover/map",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Discover Catalog
     * This service message allows a device to post the discovery context for getting offers, software, and maps for the GetApp agent.
     * @param discoveryMessageDto 
     * @return DiscoveryResDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoveryControllerDiscoveryCatalog(discoveryMessageDto: DiscoveryMessageDto) : DiscoveryResDto {
        val localVarResponse = discoveryControllerDiscoveryCatalogWithHttpInfo(discoveryMessageDto = discoveryMessageDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscoveryResDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Discover Catalog
     * This service message allows a device to post the discovery context for getting offers, software, and maps for the GetApp agent.
     * @param discoveryMessageDto 
     * @return ApiResponse<DiscoveryResDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discoveryControllerDiscoveryCatalogWithHttpInfo(discoveryMessageDto: DiscoveryMessageDto) : ApiResponse<DiscoveryResDto?> {
        val localVariableConfig = discoveryControllerDiscoveryCatalogRequestConfig(discoveryMessageDto = discoveryMessageDto)

        return request<DiscoveryMessageDto, DiscoveryResDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoveryControllerDiscoveryCatalog
     *
     * @param discoveryMessageDto 
     * @return RequestConfig
     */
    fun discoveryControllerDiscoveryCatalogRequestConfig(discoveryMessageDto: DiscoveryMessageDto) : RequestConfig<DiscoveryMessageDto> {
        val localVariableBody = discoveryMessageDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/device/discover",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IM Pull Discovery Devices
     * This service message allows an IM device to pull the discovery context of other agents.
     * @param requestBody 
     * @return kotlin.collections.List<DeviceDiscoverResDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoveryControllerImPullDiscoveryDevices(requestBody: kotlin.collections.List<kotlin.String>) : kotlin.collections.List<DeviceDiscoverResDto> {
        val localVarResponse = discoveryControllerImPullDiscoveryDevicesWithHttpInfo(requestBody = requestBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DeviceDiscoverResDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IM Pull Discovery Devices
     * This service message allows an IM device to pull the discovery context of other agents.
     * @param requestBody 
     * @return ApiResponse<kotlin.collections.List<DeviceDiscoverResDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discoveryControllerImPullDiscoveryDevicesWithHttpInfo(requestBody: kotlin.collections.List<kotlin.String>) : ApiResponse<kotlin.collections.List<DeviceDiscoverResDto>?> {
        val localVariableConfig = discoveryControllerImPullDiscoveryDevicesRequestConfig(requestBody = requestBody)

        return request<kotlin.collections.List<kotlin.String>, kotlin.collections.List<DeviceDiscoverResDto>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoveryControllerImPullDiscoveryDevices
     *
     * @param requestBody 
     * @return RequestConfig
     */
    fun discoveryControllerImPullDiscoveryDevicesRequestConfig(requestBody: kotlin.collections.List<kotlin.String>) : RequestConfig<kotlin.collections.List<kotlin.String>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/device/im/pull/discovery",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IM Push Discovery Devices
     * This service message allows an IM device to push the discovery context of other agents.
     * @param requestBody 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoveryControllerImPushDiscoveryDevices(requestBody: kotlin.collections.List<kotlin.String>) : Unit {
        val localVarResponse = discoveryControllerImPushDiscoveryDevicesWithHttpInfo(requestBody = requestBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IM Push Discovery Devices
     * This service message allows an IM device to push the discovery context of other agents.
     * @param requestBody 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun discoveryControllerImPushDiscoveryDevicesWithHttpInfo(requestBody: kotlin.collections.List<kotlin.String>) : ApiResponse<Unit?> {
        val localVariableConfig = discoveryControllerImPushDiscoveryDevicesRequestConfig(requestBody = requestBody)

        return request<kotlin.collections.List<kotlin.String>, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoveryControllerImPushDiscoveryDevices
     *
     * @param requestBody 
     * @return RequestConfig
     */
    fun discoveryControllerImPushDiscoveryDevicesRequestConfig(requestBody: kotlin.collections.List<kotlin.String>) : RequestConfig<kotlin.collections.List<kotlin.String>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/device/im/push/discovery",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param mtlsStatusDto 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discoveryControllerUpdateMTlsStatus(mtlsStatusDto: MTlsStatusDto) : Unit {
        val localVarResponse = discoveryControllerUpdateMTlsStatusWithHttpInfo(mtlsStatusDto = mtlsStatusDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param mtlsStatusDto 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun discoveryControllerUpdateMTlsStatusWithHttpInfo(mtlsStatusDto: MTlsStatusDto) : ApiResponse<Unit?> {
        val localVariableConfig = discoveryControllerUpdateMTlsStatusRequestConfig(mtlsStatusDto = mtlsStatusDto)

        return request<MTlsStatusDto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discoveryControllerUpdateMTlsStatus
     *
     * @param mtlsStatusDto 
     * @return RequestConfig
     */
    fun discoveryControllerUpdateMTlsStatusRequestConfig(mtlsStatusDto: MTlsStatusDto) : RequestConfig<MTlsStatusDto> {
        val localVariableBody = mtlsStatusDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/device/mTlsStatus",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
