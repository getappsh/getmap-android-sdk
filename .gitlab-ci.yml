# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml

### Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

image: eclipse-temurin:17-jdk-jammy
variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "33"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "33.0.2"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "9477386"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget unzip

  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-sdk-root"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --no-verbose --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  - unzip -q -d "$ANDROID_HOME/cmdline-tools" "$ANDROID_HOME/cmdline-tools.zip"
  - mv -T "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/tools"
  - export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/cmdline-tools/tools/bin

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --licenses > /dev/null || true
  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew

calculate_new_tag:
  stage: .pre
  variables:
    GITLAB_TOKEN: "glpat-3aQazRH65Vx9U6kdxo8e"
  before_script:
    - |
      ACCESS_TOKEN="glpat-3aQazRH65Vx9U6kdxo8e"
      OTHER_PROJECT_ID="35"
      GITLAB_DOMAIN="gitlab.getapp.sh"
      LAST_TAG=$(curl -s --header "PRIVATE-TOKEN: $ACCESS_TOKEN" "https://$GITLAB_DOMAIN/api/v4/projects/$OTHER_PROJECT_ID/repository/tags" | awk -F'"' '/name/{print $4; exit}')
      echo "Last tag: $LAST_TAG"
  script:
    - echo $LAST_TAG
    - export MAJOR=$(echo $LAST_TAG | awk -F'.' '{print $1}')
    - export MINOR=$(echo $LAST_TAG | awk -F'.' '{print $2}')
    - export PATCH=$(echo $LAST_TAG | awk -F'.' '{print $3}')
    - export NEXT_PATCH=$((PATCH + 1))
    - export NEW_TAG="$MAJOR.$MINOR.$NEXT_PATCH"
    - echo ${NEW_TAG}
    - project_url=$(echo $CI_PROJECT_URL | sed 's/https:\/\///')
    - echo $project_url
    - git remote set-url origin https://oauth2:$GITLAB_TOKEN@$project_url
    - git tag $NEW_TAG
    - git push origin --tags || true
    - echo $NEW_TAG > NEW_TAG.txt
    - echo "the version of this GetMpp-SDK-agent is ${NEW_TAG}" > version.txt
  artifacts:
    paths:
      - NEW_TAG.txt 
      - version.txt
  except:
    - tags
  tags:
    - shell

# Basic android and gradle stuff
# Check linting
lintDebug:
  interruptible: true
  stage: build
  tags:
    - docker
  except:
    - tags
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
  artifacts:
    paths:
      - app/lint/reports/lint-results-debug.html
    expose_as: "lint-report"
    when: always

# Make Project
assembleDebug:
  interruptible: true
  stage: build
  tags:
    - docker
  except:
    - tags
  script:
    - ./gradlew assembleDebug
    - echo $CI_JOB_URL > url_job_link.txt
  artifacts:
    name: getmap-agent-SDK  
    paths:
      - app/build/outputs/
      - app/sdk/build/outputs/
      - url_job_link.txt

# Run all tests, if any fails, interrupt the pipeline(fail it)
debugTests:
  needs: [lintDebug, assembleDebug]
  interruptible: true
  stage: test
  tags:
    - docker
  except:
    - tags
  script:
    - ./gradlew -Pci --console=plain :app:testDebug

create_release:
  stage: .post
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  services:
    - name: registry.gitlab.com/gitlab-org/release-cli:latest
      alias: docker
  tags:
    - docker
  # needs:
  #   - job: assembleDebug
  #     artifacts: true
  #   - job: calculate_new_tag
  #     artifacts: true
  variables:
    TAG: '$CI_COMMIT_SHA'
    SDK_BUILD_CI_JOB_URL: $(cat url_job_link.txt)
    NEW_TAG_1: $(cat NEW_TAG.txt)
  before_script:
    - echo "test 1234"
  script:
    - export NEW_TAG=$(cat NEW_TAG.txt) 
    - echo $NEW_TAG
    - echo "Create Release $NEW_TAG"
    - echo $CI_JOB_ID  
  release:
    name: 'Release $NEW_TAG_1'
    tag_name: ${NEW_TAG_1}-test
    ref: '$TAG'
    description: 'Release $NEW_TAG testing by david abrams bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla'
    assets:
      links:
        - name: "getapp-agent-SDK-${NEW_TAG_1}.zip"
          url: "$SDK_BUILD_CI_JOB_URL/artifacts/download"
  except:
    - tags
  # dependencies:
  #   - calculate_new_tag
  #   - assembleDebug

